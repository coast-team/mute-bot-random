import { mkdirSync, readFileSync, writeFileSync } from 'fs'
import { LogootSRopes, RenamableReplicableList } from 'mute-structs'

const sizeof = require('object-sizeof')

export function computeSnapshotSizes() {
  const folderRoot = '../results/150k-op-10-nodes-80-20-until-60k-char-then-50-50/snapshots/'
  const folderTarget = '../results/150k-op-10-nodes-80-20-until-60k-char-then-50-50/snapshots/'

  const folderListLS = [
    '1575035319',
    '1575040127',
    '1575290545',
    '1575295934',
    '1575363622',
    '1575374236',
  ]

  const folderListRLS = ['1578305501', '1578310182', '1578314024', '1578317686', '1578321804']

  const steps = Array.from({ length: 15 }, (_, i) => 10000 + i * 10000)
  const logs: string[] = []
  logs.push('nbOpes,type,size')
  mkdirSync(folderTarget)
  steps.forEach((nbope) => {
    folderListLS.forEach((folder) => {
      const filename = `Snapshot.${nbope}.Master.json`
      const fullPath = `${folderRoot}/ls/${folder}/${filename}`
      const snapshot = JSON.parse(readFileSync(fullPath).toString())

      const seq = LogootSRopes.fromPlain(snapshot) as LogootSRopes
      const size = sizeof(seq)
      const sizeStr = sizeof(seq.str)

      logs.push(`${nbope},ls,${size}`)
      logs.push(`${nbope},content,${sizeStr}`)
    })

    folderListRLS.forEach((folder) => {
      const filename = `Snapshot.${nbope}.Master.json`
      const fullPath = `${folderRoot}/rls/${folder}/${filename}`
      const snapshot = JSON.parse(readFileSync(fullPath).toString())

      const seqWithoutGC = RenamableReplicableList.fromPlain(snapshot) as RenamableReplicableList
      const seqWithGC = RenamableReplicableList.fromPlain(snapshot) as RenamableReplicableList

      const sizeWithoutGC = sizeof(seqWithoutGC)
      const sizeStr = sizeof(seqWithoutGC.str)
      seqWithGC.renamingMapStore.purge()
      const sizeWithGC = sizeof(seqWithGC)

      logs.push(`${nbope},rlsWithoutGC,${sizeWithoutGC}`)
      logs.push(`${nbope},rlsWithGC,${sizeWithGC}`)
      logs.push(`${nbope},content,${sizeStr}`)

      if (nbope % 30000 === 0) {
        const seqRename = seqWithoutGC
        seqRename.renameLocal()
        const sizeAfterRenameWithoutGC = sizeof(seqRename)
        seqRename.renamingMapStore.purge()
        const sizeAfterRenameWithGC = sizeof(seqRename)
        logs.push(`${nbope},rlsWithoutGC,${sizeAfterRenameWithoutGC}`)
        logs.push(`${nbope},rlsWithGC,${sizeAfterRenameWithGC}`)
      }
    })
  })
  writeFileSync(`${folderTarget}/snapshot-sizes.csv`, logs.join('\n') + '\n')
}
