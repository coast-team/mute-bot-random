import { readFileSync, writeFileSync } from 'fs'
import { LogootSRopes, RenamableReplicableList } from 'mute-structs'
import { mapFolders } from "./helpers"

const sizeof = require('object-sizeof')

function computeLSSnapshotSize (snapshot: unknown): [number, number] {
  const seq = LogootSRopes.fromPlain(snapshot) as LogootSRopes
  return [sizeof(seq), sizeof(seq.str)]
}

function computeRLSSnapshotSize (snapshot: unknown): [number, number, number] {
  const seqWithoutGC = RenamableReplicableList.fromPlain(snapshot) as RenamableReplicableList
  const seqWithGC = RenamableReplicableList.fromPlain(snapshot) as RenamableReplicableList

  const sizeStr = sizeof(seqWithoutGC.str)
  const sizeWithoutGC = sizeof(seqWithoutGC)
  seqWithGC.renamingMapStore.purge()
  const sizeWithGC = sizeof(seqWithGC)
  return [sizeWithoutGC, sizeWithGC, sizeStr]
}

export function computeSnapshotSizes () {
  const folderRoot = '../wip-results'
  const folderTarget = '../wip-results'

  const foldersLS = mapFolders.get("ls") as string[]

  const logs: string[] = []
  logs.push('nbOpes,type,size,nbRenamingBots')

  const steps = Array.from({ length: 15 }, (_, i) => 10000 + i * 10000)
  steps.forEach((nbOpes) => {
    const filename = `Snapshot.${nbOpes}.Bot0.json`

    foldersLS.forEach((folder) => {
      const fullPath = `${folderRoot}/ls/${folder}/${filename}`
      const snapshot = JSON.parse(readFileSync(fullPath, "utf-8"))

      const [size, sizeStr] = computeLSSnapshotSize(snapshot)

      for (let nbRenamingBots = 1; nbRenamingBots < 5; nbRenamingBots++) {
        logs.push(`${nbOpes},ls,${size},${nbRenamingBots}`)
        logs.push(`${nbOpes},content,${sizeStr},${nbRenamingBots}`)
      }
    })

    for (let nbRenamingBots = 1; nbRenamingBots < 5; nbRenamingBots++) {
      const key = `rls-${nbRenamingBots}-renaming-bots`
      const foldersRLS = mapFolders.get(key) as string[]

      foldersRLS.forEach((folder) => {
        const fullPath = `${folderRoot}/${key}/${folder}/${filename}`
        const snapshot = JSON.parse(readFileSync(fullPath, "utf-8"))

        const [sizeWithoutGC, sizeWithGC, sizeStr] = computeRLSSnapshotSize(snapshot)

        logs.push(`${nbOpes},rlsWithoutGC,${sizeWithoutGC},${nbRenamingBots}`)
        logs.push(`${nbOpes},rlsWithGC,${sizeWithGC},${nbRenamingBots}`)
        logs.push(`${nbOpes},content,${sizeStr},${nbRenamingBots}`)

        if (nbOpes % 30000 === 0) {
          const filenameAfterRenameOps = `Snapshot.${nbOpes}-after-rename-ops.Bot0.json`
          const fullPathAfterRenameOps = `${folderRoot}/${key}/${folder}/${filenameAfterRenameOps}`
          const snapshotAfterRenameOps = JSON.parse(readFileSync(fullPathAfterRenameOps, "utf-8"))

          const [sizeAfterRenameWithoutGC, sizeAfterRenameWithGC, ] = computeRLSSnapshotSize(snapshotAfterRenameOps)

          const offset = 1000 // Add an offset to prevent seaborn to merge these results with those before rename ops
          logs.push(`${nbOpes + offset},rlsWithoutGC,${sizeAfterRenameWithoutGC},${nbRenamingBots}`)
          logs.push(`${nbOpes + offset},rlsWithGC,${sizeAfterRenameWithGC},${nbRenamingBots}`)
        }
      })
    }
  })
  writeFileSync(`${folderTarget}/snapshot-sizes.csv`, logs.join('\n') + '\n')
}
