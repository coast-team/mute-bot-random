import { readFileSync, writeFileSync } from 'fs'
import { LogootSAdd, LogootSDel, LogootSRename, LogootSRopes, RenamableLogootSAdd, RenamableLogootSDel, RenamableReplicableList } from 'mute-structs'
import { fromPlainLogootSOperation, fromPlainRenamableListSOperation, mapFolders, reshapeArray } from "./helpers"

function generateLSIntermediateSnapshots () {
    const foldersLS = mapFolders.get("ls") as string[]

    foldersLS.forEach((folder) => {
        const rootPath = `../wip-results/ls/${folder}`
        const path = `${rootPath}/Logs.Bot0.json`
        const data = readFileSync(path, "utf-8")
        const log = JSON.parse(data)

        const operations: Array<LogootSAdd | LogootSDel> =
            log.map((entry: any) => {
                return fromPlainLogootSOperation(entry.operation.operation)
            })
        const doc = new LogootSRopes(log[0].site)

        operations.forEach((operation, index) => {
            if ((index % 10000 === 0) && (index % 30000 !== 0)) {
                writeFileSync(`${rootPath}/Snapshot.${index}.Bot0.json`, JSON.stringify(doc))
            }
            operation.execute(doc)
        })
    })
}

function generateRLSIntermediateSnapshots () {
    for (let nbRenamingBots = 1; nbRenamingBots < 5; nbRenamingBots++) {
        const key = `rls-${nbRenamingBots}-renaming-bots`
        const foldersRLS = mapFolders.get(key) as string[]

        foldersRLS.forEach((folder) => {
            const rootPath = `../wip-results/${key}/${folder}`
            const path = `${rootPath}/Logs.Bot0.json`
            const data = readFileSync(path, "utf-8")
            const log = JSON.parse(data)

            const operations: Array<LogootSRename | RenamableLogootSAdd | RenamableLogootSDel> =
                log.map((entry: any) => {
                    return fromPlainRenamableListSOperation(entry.operation.operation)
                })
            const doc = RenamableReplicableList.create(log[0].site)

            operations.forEach((operation, index) => {
                if ((index % 10000 === 0) && (index % 30000 !== 0)) {
                    writeFileSync(`${rootPath}/Snapshot.${index}.Bot0.json`, JSON.stringify(doc))
                }
                operation.execute(doc)
            })

            const renameOps = operations.filter((op): op is LogootSRename => op instanceof LogootSRename)
            if (renameOps.length !== nbRenamingBots * 5) {
                throw new Error("Incorrect number of rename ops")
            }

            const groupedRenameOps = reshapeArray(renameOps, nbRenamingBots)

            groupedRenameOps.forEach((renameOps, index) => {
                const currentProgress = (index + 1) * 30000
                const path = `${rootPath}/Snapshot.${currentProgress}.Bot0.json`
                const snapshot = JSON.parse(readFileSync(path, "utf-8"))

                const doc = RenamableReplicableList.fromPlain(snapshot) as RenamableReplicableList

                renameOps.forEach((renameOp) => {
                    renameOp.execute(doc)
                })

                writeFileSync(`${rootPath}/Snapshot.${currentProgress}-after-rename-ops.Bot0.json`, JSON.stringify(doc))
            })
        })
    }
}

export function generateIntermediateSnapshots () {
    generateLSIntermediateSnapshots()
    generateRLSIntermediateSnapshots()
}
