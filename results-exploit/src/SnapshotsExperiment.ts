import { readdirSync, readFileSync, writeFileSync } from 'fs'
import { RenamableReplicableList } from 'mute-structs'
import { mean, median, quantile, standardDeviation } from 'simple-statistics'
import { IResults } from './Stats'

export class SnapshotExperiment {
  constructor(folder: string) {
    console.log('Renaming test')
    const files = readdirSync(folder)
    console.log(files)

    const localtimes: number[] = []
    const remotetimes: number[] = []
    let resString = ''

    const snapshotJIG = JSON.parse(readFileSync(folder + '/' + files[0]).toString())
    for (let i = 0; i < 1000; i++) {
      const sequence = RenamableReplicableList.fromPlainLogootSRopes(snapshotJIG)
      if (!sequence) {
        console.log('sequence null in JIG loop : ' + files[0])
        break
      }
      sequence.renameLocal()
    }

    files.forEach((filename: string) => {
      console.log('File : ' + folder + '/' + filename)
      const snapshot = JSON.parse(readFileSync(folder + '/' + filename).toString())
      const sequence = RenamableReplicableList.fromPlainLogootSRopes(snapshot)
      if (!sequence) {
        console.log('sequence null : ' + filename)
      } else {
        const t1 = process.hrtime()
        const remote = sequence.renameLocal()
        const t2 = process.hrtime()

        const t3 = process.hrtime()
        sequence.renameRemote(
          remote.replicaNumber,
          remote.clock,
          remote.epoch,
          remote.renamedIdIntervals
        )
        const t4 = process.hrtime()

        const lls = (t2[0] - t1[0]) * 1000
        const llms = (t2[1] - t1[1]) / 1000000
        localtimes.push(lls + llms)

        const rls = (t4[0] - t3[0]) * 1000
        const rlms = (t4[1] - t3[1]) / 1000000
        localtimes.push(lls + llms)

        resString +=
          filename + ' - Local : ' + (lls + llms) + 'ms / Remote : ' + (rls + rlms) + '\n'
      }
    })

    const localres = this.processTimes(localtimes)
    const remoteres = this.processTimes(remotetimes)
    writeFileSync(
      './output/result-snapshot-renaming-stats.txt',
      'Local : ' + this.toString(localres) + 'Remote : ' + this.toString(remoteres) + resString
    )
  }

  private processTimes(times: number[]): IResults {
    const sortedTimes = times.sort((a, b) => a - b)
    return {
      mean: mean(sortedTimes),
      median: median(sortedTimes),
      ninetyNinePercentile: quantile(sortedTimes, 0.99),
      standardDeviation: standardDeviation(sortedTimes),
    }
  }

  private toString(res: IResults): string {
    return (
      '{\n' +
      '\tmean: ' +
      res.mean +
      '\n' +
      '\tmedian: ' +
      res.median +
      '\n' +
      '\tninetyNinePercentile: ' +
      res.ninetyNinePercentile +
      '\n' +
      '\tstandardDeviation: ' +
      res.standardDeviation +
      '\n' +
      '}\n'
    )
  }
}
