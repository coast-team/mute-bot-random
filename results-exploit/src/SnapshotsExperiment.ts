import { readdirSync, readFileSync, writeFileSync } from 'fs'
import { RenamableReplicableList } from 'mute-structs'
import { mean, median, quantile, standardDeviation } from 'simple-statistics'
import { IResults } from './Stats'

export class SnapshotExperiment {
  constructor(folderRoot: string) {
    const folderList = [
      '1571320595',
      '1571320611',
      '1571320627',
      '1571390541',
      '1571390557',
      '1571390572',
    ]
    const step = [
      '50000',
      '100000',
      '150000',
      '200000',
      '250000',
      '300000',
      '350000',
      '400000',
      '450000',
      '500000',
    ]

    console.log('Renaming test')
    const files = readdirSync(folderRoot)
    console.log(files)

    const snapshotJIT = JSON.parse(
      readFileSync(
        folderRoot + '/' + folderList[0] + '/Snapshot.' + step[0] + '.Master.json'
      ).toString()
    )
    for (let i = 0; i < 1000; i++) {
      const sequence = RenamableReplicableList.fromPlainLogootSRopes(snapshotJIT)
      if (!sequence) {
        console.log('sequence null in JIT loop : ' + files[0])
        break
      }
      const remote = sequence.renameLocal()

      const sequence2 = RenamableReplicableList.fromPlainLogootSRopes(snapshotJIT)
      if (!sequence2) {
        console.log('sequence2 null in JIT loop : ' + files[0])
        break
      }
      sequence2.renameRemote(
        remote.replicaNumber,
        remote.clock,
        remote.epoch,
        remote.renamedIdIntervals
      )
    }

    step.forEach((nbope) => {
      const localtimes: number[] = []
      const remotetimes: number[] = []
      let resString = ''

      folderList.forEach((folder) => {
        const filename = 'Snapshot.' + nbope + '.Master.json'
        console.log('File : ' + folderRoot + '/' + folder + '/' + filename)
        const snapshot = JSON.parse(
          readFileSync(folderRoot + '/' + folder + '/' + filename).toString()
        )
        const sequence = RenamableReplicableList.fromPlainLogootSRopes(snapshot)
        if (!sequence) {
          console.log('sequence null : ' + filename)
        } else {
          const t1 = process.hrtime()
          const remote = sequence.renameLocal()
          const t2 = process.hrtime()

          const sequence2 = RenamableReplicableList.fromPlainLogootSRopes(snapshot)
          if (!sequence2) {
            console.log('sequence2 null in JIT loop : ' + files[0])
          } else {
            const t3 = process.hrtime()
            sequence2.renameRemote(
              remote.replicaNumber,
              remote.clock,
              remote.epoch,
              remote.renamedIdIntervals
            )
            const t4 = process.hrtime()

            const lls = (t2[0] - t1[0]) * 1000
            const llms = (t2[1] - t1[1]) / 1000000
            localtimes.push(lls + llms)

            const rls = (t4[0] - t3[0]) * 1000
            const rlms = (t4[1] - t3[1]) / 1000000
            remotetimes.push(rls + rlms)

            resString +=
              filename + ' - Local : ' + (lls + llms) + 'ms / Remote : ' + (rls + rlms) + '\n'
          }
        }
      })

      const localres = this.processTimes(localtimes)
      const remoteres = this.processTimes(remotetimes)
      writeFileSync(
        './output/result-snapshot-' + nbope + '-renaming-stats.txt',
        'Local : ' + this.toString(localres) + 'Remote : ' + this.toString(remoteres) + resString
      )
    })
  }

  private processTimes(times: number[]): IResults {
    const sortedTimes = times.sort((a, b) => a - b)
    return {
      mean: mean(sortedTimes),
      median: median(sortedTimes),
      ninetyNinePercentile: quantile(sortedTimes, 0.99),
      standardDeviation: standardDeviation(sortedTimes),
    }
  }

  private toString(res: IResults): string {
    return (
      '{\n' +
      '\tmean: ' +
      res.mean +
      '\n' +
      '\tmedian: ' +
      res.median +
      '\n' +
      '\tninetyNinePercentile: ' +
      res.ninetyNinePercentile +
      '\n' +
      '\tstandardDeviation: ' +
      res.standardDeviation +
      '\n' +
      '}\n'
    )
  }
}
