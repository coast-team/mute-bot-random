import { LogootSRopes } from 'mute-structs'
const fs = require('fs')

export class Result {
  private sequences: Array<LogootSRopes | null>
  constructor() {
    this.sequences = []

    fs.readdirSync('./input').forEach((file: string) => {
      const struct = JSON.parse(fs.readFileSync('./input/' + file).toString())
      this.sequences.push(LogootSRopes.fromPlain(struct))
    })
  }

  public check() {
    let res = true
    const digests: Map<number, number[]> = new Map()
    this.sequences.forEach((seq, key) => {
      if (seq === null) {
        console.log('A sequence is null : ', key)
        res = false
        return
      }

      const currentDigest = seq.digest()
      if (digests.has(currentDigest)) {
        const tab = digests.get(currentDigest)
        if (tab) {
          tab.push(key)
          digests.set(currentDigest, tab)
        }
      } else {
        digests.set(currentDigest, [key])
      }
    })

    if (digests.size > 1) {
      res = false
    }

    console.log(digests)
    console.log('Size :', digests.size)

    return res
  }

  public checkString() {
    let res = true
    const strs: string[] = []

    this.sequences.forEach((seq, key) => {
      if (seq === null) {
        console.log('A sequence is null : ', key)
        res = false
        return
      }
      strs.push(seq.str)
    })

    console.log('Str 0 length :', strs[0].length)
    fs.writeFileSync('./input/str0.txt', strs[0])
    for (let i = 1; i < strs.length; i++) {
      if (strs[0] !== strs[i]) {
        res = false
        console.log(`Str are different between 0 and ${i} : `, strs[i])
        fs.writeFileSync('./input/str' + i + '.txt', strs[i])
      }
    }
    return res
  }
}
