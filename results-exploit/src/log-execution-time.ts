import { createWriteStream, readFileSync, WriteStream} from 'fs'
import { LogootSAdd, LogootSDel, LogootSRename, LogootSRopes, RenamableLogootSAdd, RenamableLogootSDel, RenamableReplicableList } from 'mute-structs'
import { fromPlainLogootSOperation, fromPlainRenamableListSOperation, mapFolders} from "./helpers"

function computeLSLogExecutionTime (outputFD: WriteStream) {
    const foldersLS = mapFolders.get("ls")!

    foldersLS.forEach((folder) => {
        const rootPath = `../2020-08-rls-with-concurrent-rename/ls/${folder}`
        const path = `${rootPath}/Logs.Bot0.json`
        const data = readFileSync(path, "utf-8")
        const log = JSON.parse(data)

        const operations: Array<LogootSAdd | LogootSDel> =
            log.map((entry: any) => {
                return fromPlainLogootSOperation(entry.operation.operation)
            })
        const doc = new LogootSRopes(1)

        const times: Array<[number, bigint]> = []
        const tStart = process.hrtime.bigint()

        operations.forEach((operation, index) => {
            operation.execute(doc)
            if (index % 2500 === 0) {
                times.push([index, process.hrtime.bigint()])
            }
        })
        times.push([operations.length, process.hrtime.bigint()])

        times.forEach(([nbOpes, t]) => {
            outputFD.write(`${nbOpes},LS,${t - tStart}\n`)
        })
    })
}

function computeRLSLogExecutionTime(outputFD: WriteStream) {
    const frequencies = ["7k5", "30k"]

    frequencies.forEach((frequency) => {
        for (let nbRenamingBots = 1; nbRenamingBots < 5; nbRenamingBots++) {
            const subkey = `rls-${nbRenamingBots}-renaming-bots`
            const foldersRLS = mapFolders.get(`rls-${frequency}-${nbRenamingBots}-renaming-bots`)!

            foldersRLS.forEach((folder) => {
                const rootPath = `../wip-results/${frequency}/${subkey}/${folder}`
                const path = `${rootPath}/Logs.Bot0.json`
                const data = readFileSync(path, "utf-8")
                const log = JSON.parse(data)

                const operations: Array<LogootSRename | RenamableLogootSAdd | RenamableLogootSDel> =
                    log.map((entry: any) => {
                        return fromPlainRenamableListSOperation(entry.operation.operation)
                    })
                const doc = RenamableReplicableList.create(1)

                const times: Array<[number, bigint]> = []
                const tStart = process.hrtime.bigint()

                operations.forEach((operation, index) => {
                    operation.execute(doc)
                    if (index % 2500 === 0) {
                        times.push([index, process.hrtime.bigint()])
                    }
                })
                times.push([operations.length, process.hrtime.bigint()])

                times.forEach(([nbOpes, t]) => {
                    outputFD.write(`${nbOpes},RLS-${frequency}-${nbRenamingBots}rb,${t - tStart}\n`)
                })
            })
        }
    })
}

export function computeLogExecutionTime () {
    const outputFD = createWriteStream("../wip-results/log-execution-time.csv", { flags: 'a' })
    outputFD.write("nbOpes,type,time\n")

    computeLSLogExecutionTime(outputFD)
    computeRLSLogExecutionTime(outputFD)

    outputFD.end()
}
