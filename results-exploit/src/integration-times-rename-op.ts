import { createWriteStream, readFileSync, WriteStream } from 'fs'
import { RenamableReplicableList } from 'mute-structs'
import { mapFolders } from "./helpers"

function computeIntegrationTimes(outputFD: WriteStream, nbOpes: number, folder: string) {
  const folderRoot = `../wip-results/ls`

  const filename = `Snapshot.${nbOpes}.Bot0.json`
  const fullPath = `${folderRoot}/${folder}/${filename}`
  const snapshot = JSON.parse(readFileSync(fullPath, "utf-8"))

  for (let i = 0; i < 6; i++) {
    const seqLocal = RenamableReplicableList.fromPlainLogootSRopes(
      snapshot
      ) as RenamableReplicableList
    snapshot.replicaNumber++
    const seqRemote = RenamableReplicableList.fromPlainLogootSRopes(
      snapshot
    ) as RenamableReplicableList
    snapshot.replicaNumber++
    const seqLosingRename = RenamableReplicableList.fromPlainLogootSRopes(
      snapshot
    ) as RenamableReplicableList
    snapshot.replicaNumber++
    const seqWinningRename = RenamableReplicableList.fromPlainLogootSRopes(
      snapshot
    ) as RenamableReplicableList
    snapshot.replicaNumber = snapshot.replicaNumber - 3

    const tLocalStart = process.hrtime.bigint()
    const remote = seqLocal.renameLocal()
    const tLocalEnd = process.hrtime.bigint()

    const tRemoteStart = process.hrtime.bigint()
    seqRemote.renameRemote(
      remote.replicaNumber,
      remote.clock,
      remote.epoch,
      remote.renamedIdIntervals
    )
    const tRemoteEnd = process.hrtime.bigint()

    const winningRemote = seqWinningRename.renameLocal()
    const tWinningConcurrentStart = process.hrtime.bigint()
    seqRemote.renameRemote(
      winningRemote.replicaNumber,
      winningRemote.clock,
      winningRemote.epoch,
      winningRemote.renamedIdIntervals
    )
    const tWinningConcurrentEnd = process.hrtime.bigint()

    const losingRemote = seqLosingRename.renameLocal()
    const tLosingConcurrentStart = process.hrtime.bigint()
    seqRemote.renameRemote(
      losingRemote.replicaNumber,
      losingRemote.clock,
      losingRemote.epoch,
      losingRemote.renamedIdIntervals
    )
    const tLosingConcurrentEnd = process.hrtime.bigint()

    const tLocal = tLocalEnd - tLocalStart
    const tRemote = tRemoteEnd - tRemoteStart
    const tWinningConcurrent = tWinningConcurrentEnd - tWinningConcurrentStart
    const tLosingConcurrent = tLosingConcurrentEnd - tLosingConcurrentStart
    outputFD.write(`${nbOpes},local,${tLocal}\n`)
    outputFD.write(`${nbOpes},remote,${tRemote}\n`)
    outputFD.write(`${nbOpes},winningConcurrentRemote,${tWinningConcurrent}\n`)
    outputFD.write(`${nbOpes},losingConcurrentRemote,${tLosingConcurrent}\n`)
  }
}

export function computeIntegrationTimesRenameOp () {
  const outputFD = createWriteStream("../wip-results/integration-times-rename-op.csv", { flags: 'a' })
  outputFD.write("nbOpes,type,time\n")

  const foldersLS = mapFolders.get("ls") as string[]

  const steps = Array.from({ length: 5 }, (_, i) => 30000 + i * 30000)
  steps.forEach((nbOpes: number) => {
    foldersLS.forEach((folder) => {
      computeIntegrationTimes(outputFD, nbOpes, folder)
    })
  })
  outputFD.end()
}
