import { mkdirSync, readdirSync, readFileSync, writeFileSync } from 'fs'
import { RenamableReplicableList } from 'mute-structs'

export function computeIntegrationTimesRenameOp() {
  const folderRoot = '../results/150k-op-10-nodes-80-20-until-60k-char-then-50-50/snapshots/ls'
  const parentOfFolderTarget =
    '../results/150k-op-10-nodes-80-20-until-60k-char-then-50-50/integration-times/integration-times-rename-op'
  const nbExistingSamples = readdirSync(parentOfFolderTarget).length
  const folderTarget = `${parentOfFolderTarget}/sample-${nbExistingSamples}`

  const folderList = [
    '1575035319',
    '1575040127',
    '1575290545',
    '1575295934',
    '1575363622',
    '1575374236',
  ]
  const steps = Array.from({ length: 15 }, (_, i) => 10000 + i * 10000)

  mkdirSync(folderTarget)
  steps.forEach((nbope) => {
    const logs: string[] = []

    for (let j = 0; j < 18; j++) {
      folderList.forEach((folder) => {
        const filePath = `${folderRoot}/${folder}/Snapshot.${nbope}.Master.json`
        const snapshot = JSON.parse(readFileSync(filePath).toString())
        const localSequence = RenamableReplicableList.fromPlainLogootSRopes(
          snapshot
        ) as RenamableReplicableList
        const remoteSequence = RenamableReplicableList.fromPlainLogootSRopes(
          snapshot
        ) as RenamableReplicableList

        const tLocalStart = process.hrtime.bigint()
        const remote = localSequence.renameLocal()
        const tLocalEnd = process.hrtime.bigint()

        const tRemoteStart = process.hrtime.bigint()
        remoteSequence.renameRemote(
          remote.replicaNumber,
          remote.clock,
          remote.epoch,
          remote.renamedIdIntervals
        )
        const tRemoteEnd = process.hrtime.bigint()

        const tLocal = tLocalEnd - tLocalStart
        const tRemote = tRemoteEnd - tRemoteStart
        logs.push(`${nbope},local,${tLocal}`)
        logs.push(`${nbope},remote,${tRemote}`)
      })
    }

    writeFileSync(
      `${folderTarget}/integration-times-rename-op-${nbope}.csv`,
      logs.join('\n') + '\n'
    )
  })
}
