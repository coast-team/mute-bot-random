import { LogootSOperation, TextOperation } from 'mute-structs'
import { ExperimentParts, OperationType } from './EperimentParts'
const fs = require('fs')

export class Experiment {
  public static typeFromString(type: string): OperationType | null {
    console.log(`Type: "${type}"`)
    switch (type) {
      case 'insert':
      case 'Insert':
      case 'ins':
      case 'i':
        return OperationType.INSERT
      case 'delete':
      case 'Delete':
      case 'del':
      case 'd':
        return OperationType.DELETE
      default:
        return null
    }
  }
  private sequence: any
  private config: IConfig

  constructor(config: IConfig, file: string) {
    this.sequence = JSON.parse(fs.readFileSync(file))
    this.config = config
    console.log(config)
  }

  public start() {
    let cpt = 0
    this.config.operations.forEach((parts) => {
      cpt++
      const type = Experiment.typeFromString(parts.type)
      if (type === null) {
        throw new Error('Type ' + parts.type + " doesn't exist")
      } else {
        const exp = new ExperimentParts(
          this.config.name + cpt,
          this.sequence,
          type,
          parts.nbChar,
          parts.nbTimes
        )
        exp.launch()
      }
    })
  }
}

export interface ILogs {
  local: TextOperation
  remote: LogootSOperation
  tLocalBefore: [number, number]
  tLocalAfter: [number, number]
  tRemoteBefore: [number, number]
  tRemoteAfter: [number, number]
}

export interface IConfig {
  name: string
  operations: IOperationConfig[]
}

export interface IOperationConfig {
  type: string
  nbChar: number
  nbTimes: number
}
