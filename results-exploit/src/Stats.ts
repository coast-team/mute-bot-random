import { writeFileSync } from 'fs'
import { mean, median, quantile, standardDeviation } from 'simple-statistics'

export class Stats {
  constructor(logs: any, file: string) {
    const local: number[] = []
    const remote: number[] = []
    const localOnRename: number[] = []
    const remotePastOnRename: number[] = []
    const remoteOnRename: number[] = []

    logs.forEach((element: any) => {
      // local.push()
      const ls = (element.tLocalAfter[0] - element.tLocalBefore[0]) * 1000000000
      const lns = element.tLocalAfter[1] - element.tLocalBefore[1]
      local.push(ls + lns)

      const rs = (element.tRemoteAfter[0] - element.tRemoteBefore[0]) * 1000000000
      const rns = element.tRemoteAfter[1] - element.tRemoteBefore[1]
      remote.push(rs + rns)

      if (element.tLocalOnRenameBefore && element.tLocalOnRenameAfter) {
        const lrs = (element.tLocalOnRenameAfter[0] - element.tLocalOnRenameBefore[0]) * 1000000000
        const lrns = element.tLocalOnRenameAfter[1] - element.tLocalOnRenameBefore[1]
        localOnRename.push(lrs + lrns)
      }

      if (element.tRemotePastOnRenameBefore && element.tRemotePastOnRenameAfter) {
        const rprs =
          (element.tRemotePastOnRenameAfter[0] - element.tRemotePastOnRenameBefore[0]) * 1000000000
        const rprns = element.tRemotePastOnRenameAfter[1] - element.tRemotePastOnRenameBefore[1]
        remotePastOnRename.push(rprs + rprns)
      }

      if (element.tRemoteOnRenameBefore && element.tRemoteOnRenameAfter) {
        const rrs =
          (element.tRemoteOnRenameAfter[0] - element.tRemoteOnRenameBefore[0]) * 1000000000
        const rrns = element.tRemoteOnRenameAfter[1] - element.tRemoteOnRenameBefore[1]
        remoteOnRename.push(rrs + rrns)
      }
    })

    const result = {
      local: this.processTimes(local),
      remote: this.processTimes(remote),
      localOnRename: localOnRename.length > 0 ? this.processTimes(localOnRename) : '',
      remotePastOnRename:
        remotePastOnRename.length > 0 ? this.processTimes(remotePastOnRename) : '',
      remoteOnRename: remoteOnRename.length > 0 ? this.processTimes(remoteOnRename) : '',
    }
    writeFileSync(file, JSON.stringify(result))
  }

  private processTimes(times: number[]): IResults {
    const sortedTimes = times.sort((a, b) => a - b)
    return {
      mean: mean(sortedTimes),
      median: median(sortedTimes),
      ninetyNinePercentile: quantile(sortedTimes, 0.99),
      standardDeviation: standardDeviation(sortedTimes),
    }
  }
}

export interface IResults {
  mean: number
  median: number
  ninetyNinePercentile: number
  standardDeviation: number
}
