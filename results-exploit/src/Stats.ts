import { writeFileSync } from 'fs'
import { mean, median, quantile, standardDeviation } from 'simple-statistics'

export class Stats {
  constructor(logs: any, file: string) {
    const local: number[] = []
    const remote: number[] = []
    const localOnRename: number[] = []
    const remotePastOnRename: number[] = []
    const remoteOnRename: number[] = []

    logs.forEach((element: any) => {
      // local.push()
      const ls = (element.tLocalAfter[0] - element.tLocalBefore[0]) * 1000
      const lms = (element.tLocalAfter[1] - element.tLocalBefore[1]) / 1000000
      local.push(ls + lms)

      const rs = (element.tRemoteAfter[0] - element.tRemoteBefore[0]) * 1000
      const rms = (element.tRemoteAfter[1] - element.tRemoteBefore[1]) / 1000000
      remote.push(rs + rms)

      if (element.tLocalOnRenameBefore && element.tLocalOnRenameAfter) {
        const lrs = (element.tLocalOnRenameAfter[0] - element.tLocalOnRenameBefore[0]) * 1000
        const lrms = (element.tLocalOnRenameAfter[1] - element.tLocalOnRenameBefore[1]) / 1000000
        localOnRename.push(lrs + lrms)
      }

      if (element.tRemotePastOnRenameBefore && element.tRemotePastOnRenameAfter) {
        const rprs =
          (element.tRemotePastOnRenameAfter[0] - element.tRemotePastOnRenameBefore[0]) * 1000
        const rprms =
          (element.tRemotePastOnRenameAfter[1] - element.tRemotePastOnRenameBefore[1]) / 1000000
        remotePastOnRename.push(rprs + rprms)
      }

      if (element.tRemoteOnRenameBefore && element.tRemoteOnRenameAfter) {
        const rrs = (element.tRemoteOnRenameAfter[0] - element.tRemoteOnRenameBefore[0]) * 1000
        const rrms = (element.tRemoteOnRenameAfter[1] - element.tRemoteOnRenameBefore[1]) / 1000000
        remoteOnRename.push(rrs + rrms)
      }
    })

    let stringResult =
      'local:' +
      this.toString(this.processTimes(local)) +
      '\nremote:' +
      this.toString(this.processTimes(remote))
    stringResult +=
      localOnRename.length > 0
        ? '\nlocalOnRename:' + this.toString(this.processTimes(localOnRename))
        : ''
    stringResult +=
      remotePastOnRename.length > 0
      ? '\nremotePastOnRename:' + this.toString(this.processTimes(remotePastOnRename))
      : ''
    stringResult +=
      remoteOnRename.length > 0
      ? '\nremoteOnRename:' + this.toString(this.processTimes(remoteOnRename))
      : ''
    writeFileSync(file, stringResult)
  }

  private toString(res: IResults): string {
    return (
      '{\n' +
      '\tmean: ' +
      res.mean +
      '\n' +
      '\tmedian: ' +
      res.median +
      '\n' +
      '\tninetyNinePercentile: ' +
      res.ninetyNinePercentile +
      '\n' +
      '\tstandardDeviation: ' +
      res.standardDeviation +
      '\n' +
      '}\n'
    )
  }

  private processTimes(times: number[]): IResults {
    const sortedTimes = times.sort((a, b) => a - b)
    return {
      mean: mean(sortedTimes),
      median: median(sortedTimes),
      ninetyNinePercentile: quantile(sortedTimes, 0.99),
      standardDeviation: standardDeviation(sortedTimes),
    }
  }
}

export interface IResults {
  mean: number
  median: number
  ninetyNinePercentile: number
  standardDeviation: number
}
