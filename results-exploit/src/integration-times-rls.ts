import { mkdirSync, readdirSync, readFileSync, writeFileSync } from 'fs'
import { RenamableReplicableList } from 'mute-structs'

function random(max: number) {
  return Math.floor(Math.random() * (max + 1))
}

export function computeIntegrationTimesRLS() {
  const folderRoot = '../results/150k-op-10-nodes-80-20-until-60k-char-then-50-50/snapshots/rls'
  const parentOfFolderTarget =
    '../results/150k-op-10-nodes-80-20-until-60k-char-then-50-50/integration-times/integration-times-rls'
  const nbExistingSamples = readdirSync(parentOfFolderTarget).length
  const folderTarget = `${parentOfFolderTarget}/sample-${nbExistingSamples}`

  const folderList = ['1578305501', '1578310182', '1578314024', '1578317686', '1578321804']
  const steps = Array.from({ length: 15 }, (_, i) => 10000 + i * 10000)

  mkdirSync(folderTarget)
  steps.forEach((nbope) => {
    const logs: string[] = []
    folderList.forEach((folder) => {
      const filename = `Snapshot.${nbope}.Master.json`
      const fullPath = `${folderRoot}/${folder}/${filename}`
      const snapshot = JSON.parse(readFileSync(fullPath).toString())

      const seq = RenamableReplicableList.fromPlain(snapshot) as RenamableReplicableList
      seq.renamingMapStore.purge()
      const plainSeq = JSON.parse(JSON.stringify(seq))

      for (let j = 0; j < 500; j++) {
        const localSequence = RenamableReplicableList.fromPlain(plainSeq) as RenamableReplicableList
        const remoteSequence = RenamableReplicableList.fromPlain(
          plainSeq
        ) as RenamableReplicableList

        const index = random(localSequence.str.length)
        const tLocalStart = process.hrtime.bigint()
        const remoteOp = localSequence.insertLocal(index, 'I')
        const tLocalEnd = process.hrtime.bigint()

        const tRemoteStart = process.hrtime.bigint()
        remoteOp.execute(remoteSequence)
        const tRemoteEnd = process.hrtime.bigint()

        const tLocal = tLocalEnd - tLocalStart
        const tRemote = tRemoteEnd - tRemoteStart

        logs.push(`${nbope},localWithRename,${tLocal}`)
        logs.push(`${nbope},remoteWithRename,${tRemote}`)

        if (nbope % 30000 === 0) {
          const concurrentRenamedSequence = RenamableReplicableList.fromPlain(
            plainSeq
          ) as RenamableReplicableList
          concurrentRenamedSequence.renameLocal()

          const tRemoteConcurrentToRenameStart = process.hrtime.bigint()
          remoteOp.execute(concurrentRenamedSequence)
          const tRemoteConcurrentToRenameEnd = process.hrtime.bigint()

          const tRemoteConcurrentToRename =
            tRemoteConcurrentToRenameEnd - tRemoteConcurrentToRenameStart
          logs.push(`${nbope},remoteConcurrentToRename,${tRemoteConcurrentToRename}`)
        }
      }
    })
    writeFileSync(`${folderTarget}/integration-times-rls-${nbope}.csv`, logs.join('\n') + '\n')
  })
}
