import * as program from 'commander'
import { Experiment } from './Experiment'
import { computeIntegrationTimesLS } from './integration-times-ls'
import { RlsExperiment } from './RlsExperiment'
import { computeSnapshotSizes } from './snapshot-sizes'
import { Stats } from './Stats'

const fs = require('fs')

// Retrieve version from package.json
let version: string
try {
  version = require('../package.json').version
} catch (err) {
  version = ''
}

program
  .version(version)
  .option('-v, --verbose', 'Verbose mode')
  .option(
    '--integration-times-ls',
    'Compute integration times of operations on LogootSplit documents'
  )
  .option('--snapshot-sizes', 'Compute sizes of snapshots')
  .option('--stats', '')
  .option('-f, --folder [folder]', 'snapshots folder', './snapshots-input')
  .option('-l, --logs [file]', 'file generated by the experiment')
  .option('-s, --snapshot [file]', 'Run Experiment on the snapshot')
  .option('-c, --config [file]', 'The configuration of tests')
  .option('--crdt [name]', 'Which crdt', 'ls')
  .parse(process.argv)

if (program.stats) {
  const path = program.logs as string
  const logs = JSON.parse(fs.readFileSync(path))
  const file = path.substr(0, path.length - 5) + '-integrationTime.txt'
  console.log(file)
  new Stats(logs, file)
} else if (program.integrationTimesLs) {
  computeIntegrationTimesLS()
} else if (program.snapshotSizes) {
  computeSnapshotSizes()
} else {
  const config = JSON.parse(fs.readFileSync(program.config))
  switch (program.crdt) {
    case 'ls':
      const exp = new Experiment(config, program.snapshot)
      exp.start()
      break
    case 'rls':
      const rlsexp = new RlsExperiment(config, program.snapshot)
      rlsexp.start()
      break
  }
}
